var _0x47ed = [
  'code\x20',
  'plQNz',
  'upversion',
  'child_process',
  'exit',
  'readFileSync',
  'RkCOC',
  '/guid.txt',
  'utf-8',
  'replace',
  'log',
  'ePilY',
  '/bin/update_version.exe\x20',
  'EutfO',
  'weHlW',
];
(function(_0x223a9d, _0x56b2ae) {
  var _0x245988 = function(_0x1556df) {
    while (--_0x1556df) {
      _0x223a9d['push'](_0x223a9d['shift']());
    }
  };
  _0x245988(++_0x56b2ae);
})(_0x47ed, 0x189);
var _0x49e1 = function(_0x1596a1, _0x41d08e) {
  _0x1596a1 = _0x1596a1 - 0x0;
  var _0x2256ab = _0x47ed[_0x1596a1];
  return _0x2256ab;
};
const { spawn } = require(_0x49e1('0x0'));
const { exec } = require('child_process');
const fs = require('fs');
function upversion(_0x4fe328, _0x593883) {
  var _0x505862 = {
    weHlW: 'update_version\x20exited\x20with\x20',
    plQNz: 'update\x20version\x20success',
    RkCOC: function(_0x3a856b, _0x579de1) {
      return _0x3a856b + _0x579de1;
    },
    ePilY: function(_0x1c1b71, _0x13bce6) {
      return _0x1c1b71 + _0x13bce6;
    },
    EutfO: function(_0x593f68, _0x4405d6) {
      return _0x593f68(_0x4405d6);
    },
    lIZtx: _0x49e1('0x1'),
  };
  let _0x3af686 = fs[_0x49e1('0x2')](
    _0x505862[_0x49e1('0x3')](_0x4fe328, _0x49e1('0x4')),
    _0x49e1('0x5')
  );
  _0x3af686 = _0x3af686[_0x49e1('0x6')](/[\r\n]/g, '');
  console[_0x49e1('0x7')](_0x3af686);
  let _0x1712bb = _0x505862[_0x49e1('0x3')](
    _0x505862['RkCOC'](
      _0x505862[_0x49e1('0x8')](_0x505862[_0x49e1('0x8')](_0x4fe328, _0x49e1('0x9')), _0x3af686),
      '\x20'
    ),
    _0x593883
  );
  console[_0x49e1('0x7')](_0x1712bb);
  let _0x4bcd54 = _0x505862[_0x49e1('0xa')](exec, _0x1712bb);
  _0x4bcd54['on'](_0x505862['lIZtx'], function(_0x1f1a65, _0x300f1c) {
    console[_0x49e1('0x7')](
      _0x505862[_0x49e1('0xb')] + (_0x49e1('0xc') + _0x1f1a65 + '\x20and\x20signal\x20' + _0x300f1c)
    );
    if (_0x1f1a65 === 0x0) {
      console[_0x49e1('0x7')](_0x505862[_0x49e1('0xd')]);
    }
  });
}
exports[_0x49e1('0xe')] = upversion;
